from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime, DECIMAL, Numeric, TIMESTAMP, TIME, func
from sqlalchemy.orm import relationship
from core.database.sessions import Base


class MasterPort(Base):
    __tablename__ = "master_port"
    # __table_args__ = {'schema': 'stg_pelni', 'extend_existing': True} #Schema

    id_port = Column(String, primary_key=True, index=True)
    deleted_by = Column(String)
    deleted_date = Column(TIMESTAMP)
    is_deleted = Column(Boolean)
    created_by = Column(String)
    created_date = Column(TIMESTAMP)
    changed_by = Column(String)
    changed_date = Column(TIMESTAMP)
    address = Column(String)
    active_status = Column(Boolean)
    avg_berth_time = Column(DECIMAL)
    city_regency = Column(String)
    code = Column(String)
    cruise_line_length = Column(Numeric)
    cruise_line_width = Column(Numeric)
    flag_data_source = Column(String)
    flag_pioneer = Column(String)
    flag_ppss = Column(String)  # char
    fresh_water = Column(String)
    freshwater_delivery_method = Column(String)
    fuel = Column(Boolean)
    height_at_high_tide = Column(Numeric)
    height_at_low_tide = Column(Numeric) 
    latitude = Column(String)
    longitude = Column(String)
    max_berth_time = Column(TIME)
    min_berth_time = Column(TIME)
    number_of_berth = Column(Integer)
    phone = Column(String)
    pic_local = Column(String)
    pilot_ship = Column(String)
    port_code = Column(String)
    port_name = Column(String)
    province = Column(String)
    pumping_rate = Column(Numeric)
    timezone_offset = Column(Integer)
    tugboat = Column(String)
    utc = Column(String)
    wharf_depth = Column(String)
    wharf_length = Column(String)

    # destinationport = relationship("HistPaxRevenue", foreign_keys="HistPaxRevenue.destination_port", back_populates="destinationport")
    # originport = relationship("HistPaxRevenue",foreign_keys="HistPaxRevenue.origin_port", back_populates='originport')

class MasterShip(Base):
    __tablename__ = "master_ship"
    # __table_args__ = {'schema': 'stg_pelni', 'extend_existing': True} #Schema

    id_ship = Column(String, primary_key=True, index=True)
    deleted_by = Column(String)
    deleted_date = Column(TIMESTAMP)
    is_deleted = Column(Boolean)
    created_by = Column(String)
    created_date = Column(TIMESTAMP)
    changed_by = Column(String)
    changed_date = Column(TIMESTAMP)
    active_status = Column(Boolean)
    breadth = Column(Integer)
    capacity_cargo = Column(Integer)
    capacity_container_dry = Column(Integer)
    capacity_container_reefer = Column(Integer)
    capacity_pax = Column(Integer)
    capacity_vehicle_car = Column(Integer)
    capacity_vehicle_motorcycle = Column(Integer)
    capacity_vehicle_truck = Column(Integer)
    content = Column(String)
    dwt = Column(Integer)
    file_name = Column(String)
    flag_data_source = Column(String)
    fuel_need = Column(Integer)
    imo_number = Column(String)
    innaport_code = Column(String)
    length_overal = Column(Integer)
    name = Column(String)
    near_coastal_voyages = Column(String)
    ship_code = Column(String)
    speed = Column(Integer)
    type_ship = Column(String)
    type_ship_pax = Column(String)
    year_of_built = Column(Integer)
    draught = Column(Integer)
    capacity_redpack = Column(Integer)

class HistPaxRevenue(Base):
    __tablename__ = "hist_pax_revenue"
    # __table_args__ = {'schema': 'stg_pelni', 'extend_existing': True} #Schema

    id_hist_pax = Column(String, primary_key=True,index=True)
    deleted_by = Column(String)
    deleted_date = Column(TIMESTAMP)
    is_deleted = Column(Boolean)
    created_by = Column(String)
    created_date = Column(TIMESTAMP)
    changed_by = Column(String)
    changed_date = Column(TIMESTAMP)
    departure = Column(TIMESTAMP)
    departure_date = Column(TIMESTAMP)
    departure_time = Column(TIMESTAMP)
    voyage = Column(String)
    destination_port = Column(String) #, ForeignKey('master_port.id_port')
    origin_port = Column(String) #, ForeignKey('master_port.id_port')
    idship = Column(String)
    stop = Column(Integer)
    ship_name = Column(String)
    ship_code = Column(String)
    type = Column(String)
    total = Column(DECIMAL)
    revenue = Column(DECIMAL)
    org_name = Column(String)
    org_code = Column(String)
    des_name = Column(String)
    des_code = Column(String)
    uom = Column(String)
    type_rev = Column(Integer)


    # destinationport = relationship("MasterPort",foreign_keys=destination_port, back_populates="destinationport")
    # originport = relationship("MasterPort",foreign_keys=origin_port,back_populates='originport')
